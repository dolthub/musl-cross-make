diff --git a/src/malloc/calloc.c b/src/malloc/calloc.c
--- a/src/malloc/calloc.c
+++ b/src/malloc/calloc.c
@@ -1,45 +0,0 @@
-#include <stdlib.h>
-#include <stdint.h>
-#include <string.h>
-#include <errno.h>
-#include "dynlink.h"
-
-static size_t mal0_clear(char *p, size_t n)
-{
-	const size_t pagesz = 4096; /* arbitrary */
-	if (n < pagesz) return n;
-#ifdef __GNUC__
-	typedef uint64_t __attribute__((__may_alias__)) T;
-#else
-	typedef unsigned char T;
-#endif
-	char *pp = p + n;
-	size_t i = (uintptr_t)pp & (pagesz - 1);
-	for (;;) {
-		pp = memset(pp - i, 0, i);
-		if (pp - p < pagesz) return pp - p;
-		for (i = pagesz; i; i -= 2*sizeof(T), pp -= 2*sizeof(T))
-		        if (((T *)pp)[-1] | ((T *)pp)[-2])
-				break;
-	}
-}
-
-static int allzerop(void *p)
-{
-	return 0;
-}
-weak_alias(allzerop, __malloc_allzerop);
-
-void *calloc(size_t m, size_t n)
-{
-	if (n && m > (size_t)-1/n) {
-		errno = ENOMEM;
-		return 0;
-	}
-	n *= m;
-	void *p = malloc(n);
-	if (!p || (!__malloc_replaced && __malloc_allzerop(p)))
-		return p;
-	n = mal0_clear(p, n);
-	return memset(p, 0, n);
-}
diff --git a/src/malloc/free.c b/src/malloc/free.c
--- a/src/malloc/free.c
+++ b/src/malloc/free.c
@@ -1,6 +0,0 @@
-#include <stdlib.h>
-
-void free(void *p)
-{
-	__libc_free(p);
-}
diff --git a/src/malloc/libc_calloc.c b/src/malloc/libc_calloc.c
--- a/src/malloc/libc_calloc.c
+++ b/src/malloc/libc_calloc.c
@@ -1,4 +0,0 @@
-#define calloc __libc_calloc
-#define malloc __libc_malloc
-
-#include "calloc.c"
diff --git a/src/malloc/mallocng/calloc.c b/src/malloc/mallocng/calloc.c
--- /dev/null
+++ b/src/malloc/mallocng/calloc.c
@@ -0,0 +1,45 @@
+#include <stdlib.h>
+#include <stdint.h>
+#include <string.h>
+#include <errno.h>
+#include "dynlink.h"
+
+static size_t mal0_clear(char *p, size_t n)
+{
+	const size_t pagesz = 4096; /* arbitrary */
+	if (n < pagesz) return n;
+#ifdef __GNUC__
+	typedef uint64_t __attribute__((__may_alias__)) T;
+#else
+	typedef unsigned char T;
+#endif
+	char *pp = p + n;
+	size_t i = (uintptr_t)pp & (pagesz - 1);
+	for (;;) {
+		pp = memset(pp - i, 0, i);
+		if (pp - p < pagesz) return pp - p;
+		for (i = pagesz; i; i -= 2*sizeof(T), pp -= 2*sizeof(T))
+		        if (((T *)pp)[-1] | ((T *)pp)[-2])
+				break;
+	}
+}
+
+static int allzerop(void *p)
+{
+	return 0;
+}
+weak_alias(allzerop, __malloc_allzerop);
+
+void *calloc(size_t m, size_t n)
+{
+	if (n && m > (size_t)-1/n) {
+		errno = ENOMEM;
+		return 0;
+	}
+	n *= m;
+	void *p = malloc(n);
+	if (!p || (!__malloc_replaced && __malloc_allzerop(p)))
+		return p;
+	n = mal0_clear(p, n);
+	return memset(p, 0, n);
+}
diff --git a/src/malloc/mallocng/libc_calloc.c b/src/malloc/mallocng/libc_calloc.c
--- /dev/null
+++ b/src/malloc/mallocng/libc_calloc.c
@@ -0,0 +1,4 @@
+#define calloc __libc_calloc
+#define malloc __libc_malloc
+
+#include "calloc.c"
diff --git a/src/malloc/mallocng/libc_free.c b/src/malloc/mallocng/libc_free.c
--- /dev/null
+++ b/src/malloc/mallocng/libc_free.c
@@ -0,0 +1,6 @@
+#include <stdlib.h>
+
+void free(void *p)
+{
+	__libc_free(p);
+}
diff --git a/src/malloc/mallocng/libc_realloc.c b/src/malloc/mallocng/libc_realloc.c
--- /dev/null
+++ b/src/malloc/mallocng/libc_realloc.c
@@ -0,0 +1,6 @@
+#include <stdlib.h>
+
+void *realloc(void *p, size_t n)
+{
+	return __libc_realloc(p, n);
+}
diff --git a/src/malloc/mallocng/memalign.c b/src/malloc/mallocng/memalign.c
--- /dev/null
+++ b/src/malloc/mallocng/memalign.c
@@ -0,0 +1,7 @@
+#define _BSD_SOURCE
+#include <stdlib.h>
+
+void *memalign(size_t align, size_t len)
+{
+	return aligned_alloc(align, len);
+}
diff --git a/src/malloc/mallocng/posix_memalign.c b/src/malloc/mallocng/posix_memalign.c
--- /dev/null
+++ b/src/malloc/mallocng/posix_memalign.c
@@ -0,0 +1,11 @@
+#include <stdlib.h>
+#include <errno.h>
+
+int posix_memalign(void **res, size_t align, size_t len)
+{
+	if (align < sizeof(void *)) return EINVAL;
+	void *mem = aligned_alloc(align, len);
+	if (!mem) return errno;
+	*res = mem;
+	return 0;
+}
diff --git a/src/malloc/mallocng/reallocarray.c b/src/malloc/mallocng/reallocarray.c
--- /dev/null
+++ b/src/malloc/mallocng/reallocarray.c
@@ -0,0 +1,13 @@
+#define _BSD_SOURCE
+#include <errno.h>
+#include <stdlib.h>
+
+void *reallocarray(void *ptr, size_t m, size_t n)
+{
+	if (n && m > -1 / n) {
+		errno = ENOMEM;
+		return 0;
+	}
+
+	return realloc(ptr, m * n);
+}
diff --git a/src/malloc/memalign.c b/src/malloc/memalign.c
--- a/src/malloc/memalign.c
+++ b/src/malloc/memalign.c
@@ -1,7 +0,0 @@
-#define _BSD_SOURCE
-#include <stdlib.h>
-
-void *memalign(size_t align, size_t len)
-{
-	return aligned_alloc(align, len);
-}
diff --git a/src/malloc/oldmalloc/calloc.c b/src/malloc/oldmalloc/calloc.c
--- /dev/null
+++ b/src/malloc/oldmalloc/calloc.c
@@ -0,0 +1,45 @@
+#include <stdlib.h>
+#include <stdint.h>
+#include <string.h>
+#include <errno.h>
+#include "dynlink.h"
+
+static size_t mal0_clear(char *p, size_t n)
+{
+	const size_t pagesz = 4096; /* arbitrary */
+	if (n < pagesz) return n;
+#ifdef __GNUC__
+	typedef uint64_t __attribute__((__may_alias__)) T;
+#else
+	typedef unsigned char T;
+#endif
+	char *pp = p + n;
+	size_t i = (uintptr_t)pp & (pagesz - 1);
+	for (;;) {
+		pp = memset(pp - i, 0, i);
+		if (pp - p < pagesz) return pp - p;
+		for (i = pagesz; i; i -= 2*sizeof(T), pp -= 2*sizeof(T))
+		        if (((T *)pp)[-1] | ((T *)pp)[-2])
+				break;
+	}
+}
+
+static int allzerop(void *p)
+{
+	return 0;
+}
+weak_alias(allzerop, __malloc_allzerop);
+
+void *calloc(size_t m, size_t n)
+{
+	if (n && m > (size_t)-1/n) {
+		errno = ENOMEM;
+		return 0;
+	}
+	n *= m;
+	void *p = malloc(n);
+	if (!p || (!__malloc_replaced && __malloc_allzerop(p)))
+		return p;
+	n = mal0_clear(p, n);
+	return memset(p, 0, n);
+}
diff --git a/src/malloc/oldmalloc/free.c b/src/malloc/oldmalloc/free.c
--- /dev/null
+++ b/src/malloc/oldmalloc/free.c
@@ -0,0 +1,6 @@
+#include <stdlib.h>
+
+void free(void *p)
+{
+	__libc_free(p);
+}
diff --git a/src/malloc/oldmalloc/libc_calloc.c b/src/malloc/oldmalloc/libc_calloc.c
--- /dev/null
+++ b/src/malloc/oldmalloc/libc_calloc.c
@@ -0,0 +1,4 @@
+#define calloc __libc_calloc
+#define malloc __libc_malloc
+
+#include "calloc.c"
diff --git a/src/malloc/oldmalloc/memalign.c b/src/malloc/oldmalloc/memalign.c
--- /dev/null
+++ b/src/malloc/oldmalloc/memalign.c
@@ -0,0 +1,7 @@
+#define _BSD_SOURCE
+#include <stdlib.h>
+
+void *memalign(size_t align, size_t len)
+{
+	return aligned_alloc(align, len);
+}
diff --git a/src/malloc/oldmalloc/posix_memalign.c b/src/malloc/oldmalloc/posix_memalign.c
--- /dev/null
+++ b/src/malloc/oldmalloc/posix_memalign.c
@@ -0,0 +1,11 @@
+#include <stdlib.h>
+#include <errno.h>
+
+int posix_memalign(void **res, size_t align, size_t len)
+{
+	if (align < sizeof(void *)) return EINVAL;
+	void *mem = aligned_alloc(align, len);
+	if (!mem) return errno;
+	*res = mem;
+	return 0;
+}
diff --git a/src/malloc/oldmalloc/realloc.c b/src/malloc/oldmalloc/realloc.c
--- /dev/null
+++ b/src/malloc/oldmalloc/realloc.c
@@ -0,0 +1,6 @@
+#include <stdlib.h>
+
+void *realloc(void *p, size_t n)
+{
+	return __libc_realloc(p, n);
+}
diff --git a/src/malloc/oldmalloc/reallocarray.c b/src/malloc/oldmalloc/reallocarray.c
--- /dev/null
+++ b/src/malloc/oldmalloc/reallocarray.c
@@ -0,0 +1,13 @@
+#define _BSD_SOURCE
+#include <errno.h>
+#include <stdlib.h>
+
+void *reallocarray(void *ptr, size_t m, size_t n)
+{
+	if (n && m > -1 / n) {
+		errno = ENOMEM;
+		return 0;
+	}
+
+	return realloc(ptr, m * n);
+}
diff --git a/src/malloc/posix_memalign.c b/src/malloc/posix_memalign.c
--- a/src/malloc/posix_memalign.c
+++ b/src/malloc/posix_memalign.c
@@ -1,11 +0,0 @@
-#include <stdlib.h>
-#include <errno.h>
-
-int posix_memalign(void **res, size_t align, size_t len)
-{
-	if (align < sizeof(void *)) return EINVAL;
-	void *mem = aligned_alloc(align, len);
-	if (!mem) return errno;
-	*res = mem;
-	return 0;
-}
diff --git a/src/malloc/realloc.c b/src/malloc/realloc.c
--- a/src/malloc/realloc.c
+++ b/src/malloc/realloc.c
@@ -1,6 +0,0 @@
-#include <stdlib.h>
-
-void *realloc(void *p, size_t n)
-{
-	return __libc_realloc(p, n);
-}
diff --git a/src/malloc/reallocarray.c b/src/malloc/reallocarray.c
--- a/src/malloc/reallocarray.c
+++ b/src/malloc/reallocarray.c
@@ -1,13 +0,0 @@
-#define _BSD_SOURCE
-#include <errno.h>
-#include <stdlib.h>
-
-void *reallocarray(void *ptr, size_t m, size_t n)
-{
-	if (n && m > -1 / n) {
-		errno = ENOMEM;
-		return 0;
-	}
-
-	return realloc(ptr, m * n);
-}
diff --git a/src/legacy/valloc.c b/src/legacy/valloc.c
--- a/src/legacy/valloc.c
+++ b/src/legacy/valloc.c
@@ -1,8 +0,0 @@
-#define _BSD_SOURCE
-#include <stdlib.h>
-#include "libc.h"
-
-void *valloc(size_t size)
-{
-	return memalign(PAGE_SIZE, size);
-}
diff --git a/src/string/strdup.c b/src/string/strdup.c
--- a/src/string/strdup.c
+++ b/src/string/strdup.c
@@ -1,10 +0,0 @@
-#include <stdlib.h>
-#include <string.h>
-
-char *strdup(const char *s)
-{
-	size_t l = strlen(s);
-	char *d = malloc(l+1);
-	if (!d) return NULL;
-	return memcpy(d, s, l+1);
-}
diff --git a/src/string/strndup.c b/src/string/strndup.c
--- a/src/string/strndup.c
+++ b/src/string/strndup.c
@@ -1,12 +0,0 @@
-#include <stdlib.h>
-#include <string.h>
-
-char *strndup(const char *s, size_t n)
-{
-	size_t l = strnlen(s, n);
-	char *d = malloc(l+1);
-	if (!d) return NULL;
-	memcpy(d, s, l);
-	d[l] = 0;
-	return d;
-}
